design:
module hamming(d,y,c,s,d1);
  
  parameter n=10,m=14;
  
  input [n-1:0] d;
  output [m-1:0] y;
  input [m-1:0] c;
  output [3:0]s;
  output [n-1:0]d1;
  
  wire [3:0]s;
  wire [n-1:0]d1;
  //reg [n-1:0] c1;
  
hamming_encoder a1(d,y);
//hamming_decoder a2(.d1(d1),.s(s),.y(c),.c1(c1));
hamming_decoder a2(.d1(d1),.s(s),.y(c));

  
endmodule

module hamming_encoder(d,y);
   
  parameter n=10,k=4,m=14;
  input [n-1:0] d;
  output [m-1:0] y;
  reg [m-1:0] y;

  integer i,j;
  

  always@ (d)
   begin
    i=0;j=0;
     if(i<n||j<m)
       begin
         if(i==0)   
           begin
            assign y[0]=d[0]^d[1]^d[3]^d[4]^d[6]^d[8];
             i=i+1;
           end
         else if(i==1)
            begin
          assign   y[1]=d[0]^d[2]^d[3]^d[5]^d[6]^d[9];
              i=i+1;
           end
         else if(i==3)
            begin
          assign    y[3]=d[1]^d[2]^d[3]^d[7]^d[8]^d[9];
              i=i+1;
           end
         else if(i==7)
            begin
          assign    y[7]=d[4]^d[5]^d[6]^d[7]^d[8]^d[9];
              i=i+1;
           end
         else
           begin
             j=0;
            y[i]=d[j];
              i=i+1;
              j=j+1;
           end
       end
   end     
endmodule 
                        
//module hamming_decoder(.d1(d1),.s(s),.y(c),.c1(c1));
 module hamming_decoder(.d1(d1),.s(s),.y(c));


   parameter n=10,m=14;
  input [m-1:0] c;
  output [3:0]s;
  output [n-1:0]d1;
  //input [m-1:0] c1;
  
  reg [3:0]s;
  reg [n-1:0]d1;
 //wire [m-1:0] c1;
  
  integer i,j;
 
  
  always@ (c)
    begin
    i=0;j=0;
      while(i<n||j<m)
       begin
         if(i==0)   
           begin
            s[0]=c[0];
              i=i+1;
           end
         else if(i==1)
            begin
             s[1]=c[1];
             i=i+1;
           end
         else if(i==3)
            begin
              s[2]=c[3];
               i=i+1;
           end
         else if(i==7)
            begin
              s[3]=c[7];
             i=i+1;
           end
         else
           begin
             d1[i]=c[j];
               i=i+1;
              j=j+1;
           end
       end
    end
endmodule

testbench:
module hamming_tb();
  parameter n=10,m=14;
  reg [n-1:0] d;
  wire [m-1:0] y;
  reg [m-1:0] c;
  wire [3:0]s;
  wire [n-1:0]d1;
  //reg [m-1:0] c1;

hamming_encoder a1(d,y);
initial
  begin
#0d=10'b1010101010;
    $monitor("The Data Given=%b",d,,"\nThe Encoded Data is=%b",y);
end

  //hamming_decoder a2(.d1(d1),.s(s),.y(c),.c1(c1));
hamming_decoder a2(.d1(d1),.s(s),.y(c));

//initial
  //begin
 parameter c1=14'b10100010101101;
  //end
  initial
    begin
      #5 $monitor("\nThe Data Given For Decoding=%b\n",c1,"\nNow by Comparing with the Encoded Data:");
    end
    initial
    begin
   #10 c=y;
    end
  always@ (c)
    begin
      if(c1==c)
    begin
     #1 $monitor("The Encoded Data is Right");
    end
    else
      begin
        $monitor("The Encoded Data is Wrong\n\nHence the correct ENCODED Data is:%b",c);
      end
    end
initial
begin
  #10 $monitor("\nData bits=%b,Encoded data=%b",d,y);
  #10$monitor("\nAFTER DECODING:\nParity Bits=%b\nData Bits(Decoded)=%b",s,d1);
end
  
  initial
#50$finish;
  
endmodule